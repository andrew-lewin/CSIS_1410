package pacman;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;


public class Board extends JFrame {
	protected JPanel mainPanel;
	private static final Pacman pacMan = new Pacman();
	private Ghost ghost = new Ghost();
	private JLabel foodLabel;
	// Hard code player's name
	private Player p1 = new Player("Joshua");
	private Sound song;

	public Board() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(0, 0, getGrid().length * 50, getGrid()[0].length * 50 );
		setTitle("Pacman");
		setResizable(false);
		setVisible(true);
		
		
		// Calls the game board
		newMainPanel();
		
		// Listens to arrow keys
		addKeyListener(new KeyListener() {
			@Override
			public void keyPressed(KeyEvent e){
				if      (e.getKeyCode() == KeyEvent.VK_LEFT) {
					// Moving left & changing ImageIcon orientation
					pacMan.setImage(new ImageIcon("pacmanLeft.gif"));
					pacMan.getImage();
					movePacman(-1);
				}
				else if (e.getKeyCode() == KeyEvent.VK_UP) {
					// Moving up & changing ImageIcon orientation
					pacMan.setImage(new ImageIcon("pacmanUp.gif"));
					pacMan.getImage();
					movePacman((getGrid()[0].length) * -1);
				}
				else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
					// Moving right & changing ImageIcon orientation
					pacMan.setImage(new ImageIcon("pacmanRight.gif"));
					pacMan.getImage();
					movePacman(1);
				}
				else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
					// Moving down & changing ImageIcon orientation
					pacMan.setImage(new ImageIcon("pacmanDown.gif"));
					pacMan.getImage();
					movePacman(getGrid()[0].length);
				}
			}

			// Moves PacMan
			private void movePacman(int direction) {
				//Check if next space is a wall
				if (((JLabel) mainPanel.getComponents()[pacMan.getLocation() + direction]).getIcon() != Images.WALL.getIcon()) {
					//Check if next space has food
					if (((JLabel) mainPanel.getComponents()[Pacman.getLocation() + direction]).getIcon() == Images.FOOD.getIcon()) {
						p1.addScore();
						System.out.println(p1.getScore() + " " + ((JLabel) mainPanel.getComponents()[pacMan.getLocation() + direction]).getWidth() + " " + ((JLabel) mainPanel.getComponents()[pacMan.getLocation() + direction]).getHeight());
					}
					((JLabel) mainPanel.getComponents()[Pacman.getLocation()]).setIcon(null);
					pacMan.setLocation(Pacman.getLocation() + direction);
					mainPanel.remove(Pacman.getLocation());
					mainPanel.add(new JLabel(pacMan.getImage()), Pacman.getLocation());
					revalidate();
					repaint();
				}
			}

			@Override
			public void keyTyped(KeyEvent e) {
			}

			@Override
			public void keyReleased(KeyEvent e) {
			}
		});
		
		revalidate();
		repaint();
	}

	// Create new main panel
	private void newMainPanel() {
		mainPanel = (JPanel) getContentPane();
		mainPanel.setBackground(Color.BLUE);
		mainPanel.setLayout(new GridLayout(getGrid().length, getGrid()[0].length, 0, 0));

		newBoardResources();
		// add Pacman to board
		mainPanel.remove(Pacman.getLocation());
		mainPanel.add(new JLabel(pacMan.getImage()), Pacman.getLocation());
		// add Ghost
		mainPanel.remove(ghost.getLocation());
		mainPanel.add(new JLabel(ghost.getImage()), ghost.getLocation());
		// Initializes and loops song
		song = new Sound("pacmantheme.wav");
		song.loop();
	}

	// Allocates where walls and food should be set
	private void newBoardResources() {
		for (int i = 0; i < getGrid().length; i++) {
			for (int j = 0; j < getGrid()[0].length; j++) {
				if (getGrid()[i][j] == 0) {
					foodLabel = new JLabel(Images.FOOD.getIcon(), SwingConstants.CENTER);
					mainPanel.add(foodLabel);
				} else {
					JLabel wall = new JLabel (Images.WALL.getIcon(), SwingConstants.CENTER);
					mainPanel.add(wall);
				}
			}
		}
	}
	
	
	// Create board layout
	public static int[][] getGrid() {
		int[][] grid = {
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
                {1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1},
                {1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1},
                {1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1},
                {1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0},
                {1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0},
                {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
                {1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0},
                {1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1},
                {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
                {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
                {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
                {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
                {1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1},
                {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
		};
		return grid;
	}
}
